{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shoutrrr Notification library for gophers and their furry friends. Heavily inspired by caronc/apprise . To make it easy and streamlined to consume shoutrrr regardless of the notification service you want to use, we've implemented a notification service url schema. To send notifications, instantiate the ShoutrrrClient using one of the service urls below.","title":"Home"},{"location":"getting-started/","text":"Getting started \u00b6 As a package \u00b6 Using shoutrrr is easy! There is currently two ways of using it as a package. Using the direct send command \u00b6 url := \"slack://token-a/token-b/token-c\" err := shoutrrr . Send ( url , \"Hello world (or slack channel) !\" ) Using a sender \u00b6 url := \"slack://token-a/token-b/token-c\" sender , err := shoutrrr . CreateSender ( url ) sender . Send ( \"Hello world (or slack channel) !\" , map [ string ] string { /* ... */ }) Through the CLI \u00b6 Start by running the build.sh script. You may then run the shoutrrr executable: $ ./shoutrrr Usage: ./shoutrrr <ActionVerb> [ ... ] Possible actions: send, verify, generate Action details \u00b6 $ ./shoutrrr send Usage: ./shoutrrr send [ OPTIONS ] <URL> <Message [ ... ] > OPTIONS: -verbose display additional output $ ./shoutrrr verify Usage: ./shoutrrr send [ OPTIONS ] <URL> <Message [ ... ] > $ ./shoutrrr generate Usage: ./shoutrrr generate [ OPTIONS ] <service>","title":"Getting started"},{"location":"getting-started/#getting_started","text":"","title":"Getting started"},{"location":"getting-started/#as_a_package","text":"Using shoutrrr is easy! There is currently two ways of using it as a package.","title":"As a package"},{"location":"getting-started/#using_the_direct_send_command","text":"url := \"slack://token-a/token-b/token-c\" err := shoutrrr . Send ( url , \"Hello world (or slack channel) !\" )","title":"Using the direct send command"},{"location":"getting-started/#using_a_sender","text":"url := \"slack://token-a/token-b/token-c\" sender , err := shoutrrr . CreateSender ( url ) sender . Send ( \"Hello world (or slack channel) !\" , map [ string ] string { /* ... */ })","title":"Using a sender"},{"location":"getting-started/#through_the_cli","text":"Start by running the build.sh script. You may then run the shoutrrr executable: $ ./shoutrrr Usage: ./shoutrrr <ActionVerb> [ ... ] Possible actions: send, verify, generate","title":"Through the CLI"},{"location":"getting-started/#action_details","text":"$ ./shoutrrr send Usage: ./shoutrrr send [ OPTIONS ] <URL> <Message [ ... ] > OPTIONS: -verbose display additional output $ ./shoutrrr verify Usage: ./shoutrrr send [ OPTIONS ] <URL> <Message [ ... ] > $ ./shoutrrr generate Usage: ./shoutrrr generate [ OPTIONS ] <service>","title":"Action details"},{"location":"services/discord/","text":"Discord \u00b6 URL format \u00b6 Your Discord Webhook-URL will look like this: https://discordapp.com/api/webhooks/ channel / token The shoutrrr service URL should look like this: discord:// token @ channel Creating a webhook in Discord \u00b6 Open your server settings by first clicking on the name of the server. Then click on Server Settings . In the menu on the left, click on Webhooks . In the top right corner, click on Create Webhook . Set name, channel and icon to your liking and copy the Webhook URL on the bottom. Then click save. Format the service URL https : //discordapp.com/api/webhooks/693853386302554172/W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 channel token discord : //W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ@693853386302554172 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token channel","title":"Discord"},{"location":"services/discord/#discord","text":"","title":"Discord"},{"location":"services/discord/#url_format","text":"Your Discord Webhook-URL will look like this: https://discordapp.com/api/webhooks/ channel / token The shoutrrr service URL should look like this: discord:// token @ channel","title":"URL format"},{"location":"services/discord/#creating_a_webhook_in_discord","text":"Open your server settings by first clicking on the name of the server. Then click on Server Settings . In the menu on the left, click on Webhooks . In the top right corner, click on Create Webhook . Set name, channel and icon to your liking and copy the Webhook URL on the bottom. Then click save. Format the service URL https : //discordapp.com/api/webhooks/693853386302554172/W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 channel token discord : //W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ@693853386302554172 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token channel","title":"Creating a webhook in Discord"},{"location":"services/hangouts/","text":"Hangouts Chat \u00b6 URL format \u00b6 Your Hangouts Chat Incoming Webhook URL will look like this: https://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz The shoutrrr service URL should look like this: hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz In other words the incoming webhook URL with https replaced by hangouts . Creating an incoming webhook in Hangouts Chat \u00b6 Open the room you would like to add Shoutrrr to and open the chat room menu. Then click on Configure webhooks . Name the webhook and save. Copy the URL. Format the service URL by replacing https with hangouts .","title":"Hangouts Chat"},{"location":"services/hangouts/#hangouts_chat","text":"","title":"Hangouts Chat"},{"location":"services/hangouts/#url_format","text":"Your Hangouts Chat Incoming Webhook URL will look like this: https://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz The shoutrrr service URL should look like this: hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz In other words the incoming webhook URL with https replaced by hangouts .","title":"URL format"},{"location":"services/hangouts/#creating_an_incoming_webhook_in_hangouts_chat","text":"Open the room you would like to add Shoutrrr to and open the chat room menu. Then click on Configure webhooks . Name the webhook and save. Copy the URL. Format the service URL by replacing https with hangouts .","title":"Creating an incoming webhook in Hangouts Chat"},{"location":"services/mattermost/","text":"MatterMost \u00b6 URL format \u00b6 Creating a Webhook in MatterMost \u00b6 Open up the Integrations page by clicking on Integrations within the menu Click Incoming Webhooks Click Add Incoming Webhook Fill in the information for the webhook and click Save If you did everything correctly, MatterMost will give you the URL to your newly created webhook Format the service URL https://your-domain.com/hooks/bywsw8zt5jgpte3nm65qjiru6h \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token mattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token Additional URL configuration \u00b6 Mattermost provides functionality to post as another user or to another channel, compared to the webhook configuration. To do this, you can add a user and/or channel to the service URL. mattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h/shoutrrrUser/shoutrrrChannel \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token user channel Be aware that if you want to pass user or channel only, you have to leave the other one blank. Passing parameters via code \u00b6 If you want to, you also have the possibility to pass parameters to the send function. The following example contains all parameters that are currently supported. params : = ( * types . Params )( & map [ string ] string { \"username\" : \"overwriteUserName\" , \"channel\" : \"overwriteChannel\" , } , ) service . Send ( \"this is a message\" , params ) This will overwrite any options, that you passed via URL.","title":"MatterMost"},{"location":"services/mattermost/#mattermost","text":"","title":"MatterMost"},{"location":"services/mattermost/#url_format","text":"","title":"URL format"},{"location":"services/mattermost/#creating_a_webhook_in_mattermost","text":"Open up the Integrations page by clicking on Integrations within the menu Click Incoming Webhooks Click Add Incoming Webhook Fill in the information for the webhook and click Save If you did everything correctly, MatterMost will give you the URL to your newly created webhook Format the service URL https://your-domain.com/hooks/bywsw8zt5jgpte3nm65qjiru6h \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token mattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token","title":"Creating a Webhook in MatterMost"},{"location":"services/mattermost/#additional_url_configuration","text":"Mattermost provides functionality to post as another user or to another channel, compared to the webhook configuration. To do this, you can add a user and/or channel to the service URL. mattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h/shoutrrrUser/shoutrrrChannel \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 token user channel Be aware that if you want to pass user or channel only, you have to leave the other one blank.","title":"Additional URL configuration"},{"location":"services/mattermost/#passing_parameters_via_code","text":"If you want to, you also have the possibility to pass parameters to the send function. The following example contains all parameters that are currently supported. params : = ( * types . Params )( & map [ string ] string { \"username\" : \"overwriteUserName\" , \"channel\" : \"overwriteChannel\" , } , ) service . Send ( \"this is a message\" , params ) This will overwrite any options, that you passed via URL.","title":"Passing parameters via code"},{"location":"services/not-documented/","text":"Not documented yet \u00b6","title":"Not documented yet"},{"location":"services/not-documented/#not_documented_yet","text":"","title":"Not documented yet"},{"location":"services/overview/","text":"Services overview \u00b6 Click on the service for a more thorough explanation. Service URL format Discord discord:// token @ channel Telegram telegram:// token @telegram?channels= channel-1 [, channel-2 ,...] Pushover pushover://shoutrrr: apiToken @ userKey /?devices= device1 [, device2 , ...] Slack slack://[ botname @] token-a / token-b / token-c Email smtp:// username : password @ host : port /?fromAddress= fromAddress &toAddresses= recipient1 [, recipient2 ,...] Microsoft Teams teams:// token-a / token-b / token-c Gotify gotify:// gotify-host / token Pushbullet pushbullet:// api-token [/ device /# channel / email ] IFTTT ifttt:// key /?events= event1 [, event2 ,...]&value1= value1 &value2= value2 &value3= value3 Mattermost mattermost:// mattermost-host / token [/ username / channel ] Hangouts Chat hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz Zulip Chat zulip:// bot-mail : bot-key @ zulip-domain /?stream= name-or-id &topic= name","title":"Overview"},{"location":"services/overview/#services_overview","text":"Click on the service for a more thorough explanation. Service URL format Discord discord:// token @ channel Telegram telegram:// token @telegram?channels= channel-1 [, channel-2 ,...] Pushover pushover://shoutrrr: apiToken @ userKey /?devices= device1 [, device2 , ...] Slack slack://[ botname @] token-a / token-b / token-c Email smtp:// username : password @ host : port /?fromAddress= fromAddress &toAddresses= recipient1 [, recipient2 ,...] Microsoft Teams teams:// token-a / token-b / token-c Gotify gotify:// gotify-host / token Pushbullet pushbullet:// api-token [/ device /# channel / email ] IFTTT ifttt:// key /?events= event1 [, event2 ,...]&value1= value1 &value2= value2 &value3= value3 Mattermost mattermost:// mattermost-host / token [/ username / channel ] Hangouts Chat hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz Zulip Chat zulip:// bot-mail : bot-key @ zulip-domain /?stream= name-or-id &topic= name","title":"Services overview"},{"location":"services/pushover/","text":"Pushover \u00b6 URL Reference \u00b6 pushover://shoutrrr: apiToken @ userKey /?devices= device1 [, device2 , ...] Getting the keys from Pushover \u00b6 At your Pushover dashboard you can view your userKey in the top right. The Name column of the device list is what is used to refer to your devices ( device1 etc.) At the bottom of the same page there are links your applications , where you can find your apiToken The apiToken is displayed at the top of the application page. Optional parameters \u00b6 You can optionally specify the title and priority parameters in the URL: pushover://shoutrrr: token @ userKey /?devices= device &title=Custom+Title&priority=1 Note: Only supply priority values between -1 and 1, since 2 requires additional parameters that are not supported yet. Please refer to the Pushover API documentation for more information.","title":"Pushover"},{"location":"services/pushover/#pushover","text":"","title":"Pushover"},{"location":"services/pushover/#url_reference","text":"pushover://shoutrrr: apiToken @ userKey /?devices= device1 [, device2 , ...]","title":"URL Reference"},{"location":"services/pushover/#getting_the_keys_from_pushover","text":"At your Pushover dashboard you can view your userKey in the top right. The Name column of the device list is what is used to refer to your devices ( device1 etc.) At the bottom of the same page there are links your applications , where you can find your apiToken The apiToken is displayed at the top of the application page.","title":"Getting the keys from Pushover"},{"location":"services/pushover/#optional_parameters","text":"You can optionally specify the title and priority parameters in the URL: pushover://shoutrrr: token @ userKey /?devices= device &title=Custom+Title&priority=1 Note: Only supply priority values between -1 and 1, since 2 requires additional parameters that are not supported yet. Please refer to the Pushover API documentation for more information.","title":"Optional parameters"},{"location":"services/zulip/","text":"Zulip Chat \u00b6 URL format \u00b6 The shoutrrr service URL should look like this: zulip:// bot-mail : bot-key @ zulip-domain /?stream= name-or-id &topic= name Stream and topic are both optional and can be given as parameters to the Send method: sender , __ := shoutrrr . CreateSender ( url ) params := make ( types . Params ) params [ \"stream\" ] = \"mystream\" params [ \"topic\" ] = \"This is my topic\" sender . Send ( message , & params ) Since bot-mail is a mail address you need to URL escape the @ in it to %40 . An example service URL would look like: zulip://my-bot%40zulipchat.com:correcthorsebatterystable@example.zulipchat.com?stream=foo&topic=bar","title":"Zulip Chat"},{"location":"services/zulip/#zulip_chat","text":"","title":"Zulip Chat"},{"location":"services/zulip/#url_format","text":"The shoutrrr service URL should look like this: zulip:// bot-mail : bot-key @ zulip-domain /?stream= name-or-id &topic= name Stream and topic are both optional and can be given as parameters to the Send method: sender , __ := shoutrrr . CreateSender ( url ) params := make ( types . Params ) params [ \"stream\" ] = \"mystream\" params [ \"topic\" ] = \"This is my topic\" sender . Send ( message , & params ) Since bot-mail is a mail address you need to URL escape the @ in it to %40 . An example service URL would look like: zulip://my-bot%40zulipchat.com:correcthorsebatterystable@example.zulipchat.com?stream=foo&topic=bar","title":"URL format"}]}